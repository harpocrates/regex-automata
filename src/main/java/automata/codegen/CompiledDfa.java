package automata.codegen;

import automata.graph.Tdfa;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;

/**
 * Compiler for emitting a DFA pattern subclass whose methods have the DFA
 * encoded in their control flow.
 *
 * If you wish to inspect the generated bytecode, save the generated class to
 * a file (eg. {@code Files.write(Path.of("MyPat.class"), cw.toByteArray)}) and
 * use {@code javap}.
 *
 * @author Alec Theriault
 */
public final class CompiledDfa {

  /**
   * Code generator for making a subclass of {@code DfaPattern} which has code
   * specialized for a single tagged DFA pattern.
   *
   * This bytecode emitted should run on Java 8 or higher.
   *
   * @param pattern initial regular expression pattern
   * @param checkDfa DFA for just checking a full match
   * @param captureDfa DFA for just capturing a full match
   * @param lookingAtDfa DFA for just capturing a prefix match
   * @param className name of the anonymous class to generate
   * @param classFlags class flags to set (visibility, etc.)
   * @param printDebugInfo generate code which prints debug info to STDERR
   * @return class implementing {@code DfaPattern}
   */
  public static final ClassWriter generateDfaPatternSubclass(
    String pattern,
    Tdfa checkDfa,
    Tdfa captureDfa,
    Tdfa lookingAtDfa,
    String className,
    int classFlags,
    boolean printDebugInfo
  ) {

    // Note: `COMPUTE_FRAMES` means that `visitMaxs` ignores its arguments
    // TODO: avoid `COMPUTE_FRAMES` and manually produce frames
    final var cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
    cw.visit(
      Opcodes.V1_8,
      Opcodes.ACC_SUPER | classFlags,
      className,
      null, // signature
      Method.OBJECT_CLASS_NAME,
      new String[] { Method.DFAPATTERN_CLASS_NAME }
    );

    // Make constructor (which takes no arguments - the class has no state!)
    {
      final var mv = Method.EMPTYINIT_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 0);
      Method.EMPTYINIT_M.invokeMethod(mv, Method.OBJECT_CLASS_NAME);
      mv.visitCode();
      mv.visitInsn(Opcodes.RETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `pattern` method
    {
      final var mv = Method.PATTERN_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitLdcInsn(pattern);
      mv.visitInsn(Opcodes.ARETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `groupCount` method
    {
      final var mv = Method.GROUPCOUNT_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitLdcInsn(captureDfa.groupCount);
      mv.visitInsn(Opcodes.IRETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `checkMatchStatic` static helper method
    {
      final var mv = Method.CHECKMATCHSTATIC_M.newMethod(cw, Opcodes.ACC_PRIVATE);
      mv.visitCode();
      new TdfaMethodCodegen(mv, checkDfa, false, printDebugInfo).visitDfa();
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `checkMatch` method (just calls out to `checkMatchStatic`)
    {
      final var mv = Method.CHECKMATCH_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 1);
      mv.visitVarInsn(Opcodes.ILOAD, 2);
      mv.visitInsn(Opcodes.ICONST_1);
      mv.visitInsn(Opcodes.ISUB);
      mv.visitVarInsn(Opcodes.ILOAD, 3);
      Method.CHECKMATCHSTATIC_M.invokeMethod(mv, className);
      mv.visitInsn(Opcodes.IRETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `captureMatchStatic` static helper method
    {
      final var mv = Method.CAPTUREMATCHSTATIC_M.newMethod(cw, Opcodes.ACC_PRIVATE);
      mv.visitCode();
      new TdfaMethodCodegen(mv, captureDfa, true, printDebugInfo).visitDfa();
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `captureMatch` method
    {
      final var mv = Method.CAPTUREMATCH_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 1);
      mv.visitVarInsn(Opcodes.ILOAD, 2);
      mv.visitInsn(Opcodes.ICONST_1);
      mv.visitInsn(Opcodes.ISUB);
      mv.visitVarInsn(Opcodes.ILOAD, 3);
      Method.CAPTUREMATCHSTATIC_M.invokeMethod(mv, className);
      mv.visitInsn(Opcodes.ARETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `captureLookingAtStatic` static helper method
    {
      final var mv = Method.CAPTURELOOKINGATSTATIC_M.newMethod(cw, Opcodes.ACC_PRIVATE);
      mv.visitCode();
      new TdfaMethodCodegen(mv, lookingAtDfa, true, printDebugInfo).visitDfa();
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `captureLookingAt` method
    {
      final var mv = Method.CAPTURELOOKINGAT_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 1);
      mv.visitVarInsn(Opcodes.ILOAD, 2);
      mv.visitInsn(Opcodes.ICONST_1);
      mv.visitInsn(Opcodes.ISUB);
      mv.visitVarInsn(Opcodes.ILOAD, 3);
      Method.CAPTURELOOKINGATSTATIC_M.invokeMethod(mv, className);
      mv.visitInsn(Opcodes.ARETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    cw.visitEnd();
    return cw;
  }
}
