package automata.codegen;

import automata.graph.GroupMarkers;
import automata.graph.Tdfa;
import java.util.function.BiConsumer;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

/**
 * Compiler for emitting a DFA matcher subclass whose methods have the DFA
 * encoded in their control flow.
 *
 * If you wish to inspect the generated bytecode, save the generated class to
 * a file (eg. {@code Files.write(Path.of("MyPat.class"), cw.toByteArray)}) and
 * use {@code javap}.
 *
 * @author Alec Theriault
 */
public final class CompiledDfa {

  /**
   * Code generator for making a subclass of {@code DfaMatcher} which has code
   * specialized for matching, looking, and finding a single tagged DFA pattern.
   *
   * This bytecode emitted should run on Java 8 or higher.
   *
   * @param matchesDfa DFA for capturing a full match
   * @param lookingAtDfa DFA for capturing a prefix match
   * @param findDfa DFA for capturing a find match
   * @param className name of the anonymous class to generate
   * @param classFlags class flags to set (visibility, etc.)
   * @param printDebugInfo generate code which prints debug info to STDERR
   * @return class implementing {@code DfaMatcher}
   */
  public static final ClassWriter generateDfaMatcherSubclass(
    Tdfa matchesDfa,
    Tdfa lookingAtDfa,
    Tdfa findDfa,
    String className,
    int classFlags,
    boolean printDebugInfo
  ) {

    // Note: `COMPUTE_FRAMES` means that `visitMaxs` ignores its arguments
    // TODO: avoid `COMPUTE_FRAMES` and manually produce frames
    final var cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
    cw.visit(
      Opcodes.V1_8,
      Opcodes.ACC_SUPER | classFlags,
      className,
      null, // signature
      Method.DFAMATCHER_CLASS_NAME,
      new String[] { }
    );

    // Reset matcher state and load TDFA method arguments
    final BiConsumer<MethodVisitor, GroupMarkers> resetAndLoadTdfaArguments =
      (MethodVisitor mv, GroupMarkers groupMarkers) -> {
        mv.visitVarInsn(Opcodes.ALOAD, 0);
        mv.visitFieldInsn(Opcodes.GETFIELD, className, "input", "Ljava/lang/CharSequence;");
        mv.visitVarInsn(Opcodes.ALOAD, 0);
        mv.visitFieldInsn(Opcodes.GETFIELD, className, "currentStart", "I");
        mv.visitVarInsn(Opcodes.ALOAD, 0);
        mv.visitFieldInsn(Opcodes.GETFIELD, className, "regionEnd", "I");
        mv.visitVarInsn(Opcodes.ALOAD, 0);
        mv.visitFieldInsn(Opcodes.GETFIELD, className, "groups", "[I");

        // Only fill the array with `-1` if at least one group marker class is avoidable
        if (groupMarkers.classes().stream().anyMatch(c -> !c.unavoidable)) {
          mv.visitInsn(Opcodes.DUP);
          mv.visitInsn(Opcodes.ICONST_M1);
          Method.FILLINT_M.invokeMethod(mv, Method.ARRAYS_CLASS_NAME);
        }

        // Reset the successful match flag
        mv.visitVarInsn(Opcodes.ALOAD, 0);
        mv.visitInsn(Opcodes.ICONST_0);
        mv.visitFieldInsn(Opcodes.PUTFIELD, className, "successfulMatch", "Z");
      };

    // Make constructor (which takes as inputs the `DfaPattern` and the input)
    {
      final var mv = Method.COMPILEDDFAMATCHERINIT_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 0);
      mv.visitVarInsn(Opcodes.ALOAD, 1);
      mv.visitVarInsn(Opcodes.ALOAD, 2);
      mv.visitLdcInsn(matchesDfa.groupCount()); // `lookingAt`/`find` DFAs agree
      Method.DFAMATCHERINIT_M.invokeMethod(mv, Method.DFAMATCHER_CLASS_NAME);
      mv.visitCode();
      mv.visitInsn(Opcodes.RETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `groupCount` method
    {
      final var mv = Method.GROUPCOUNT_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitLdcInsn(matchesDfa.groupCount()); // `lookingAt`/`find` DFAs agree
      mv.visitInsn(Opcodes.IRETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `matchesStatic` static helper method
    {
      final var mv = Method.MATCHESSTATIC_M.newMethod(cw, Opcodes.ACC_PRIVATE);
      mv.visitCode();
      new TdfaMethodCodegen(mv, matchesDfa, printDebugInfo).visitDfa();
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `matches` method
    {
      final var mv = Method.MATCHES_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 0);
      resetAndLoadTdfaArguments.accept(mv, matchesDfa.groupMarkers);
      Method.MATCHESSTATIC_M.invokeMethod(mv, className);
      Method.POSTMATCHUPDATE_M.invokeMethod(mv, className);
      mv.visitInsn(Opcodes.IRETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `lookingAtStatic` static helper method
    {
      final var mv = Method.LOOKINGATSTATIC_M.newMethod(cw, Opcodes.ACC_PRIVATE);
      mv.visitCode();
      new TdfaMethodCodegen(mv, lookingAtDfa, printDebugInfo).visitDfa();
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `lookingAt` method
    {
      final var mv = Method.LOOKINGAT_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 0);
      resetAndLoadTdfaArguments.accept(mv, lookingAtDfa.groupMarkers);
      Method.LOOKINGATSTATIC_M.invokeMethod(mv, className);
      Method.POSTMATCHUPDATE_M.invokeMethod(mv, className);
      mv.visitInsn(Opcodes.IRETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `findStatic` static helper method
    {
      final var mv = Method.FINDSTATIC_M.newMethod(cw, Opcodes.ACC_PRIVATE);
      mv.visitCode();
      new TdfaMethodCodegen(mv, findDfa, printDebugInfo).visitDfa();
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    // `find` method
    {
      final var mv = Method.FIND_M.newMethod(cw, Opcodes.ACC_PUBLIC);
      mv.visitCode();
      mv.visitVarInsn(Opcodes.ALOAD, 0);
      resetAndLoadTdfaArguments.accept(mv, findDfa.groupMarkers);
      Method.FINDSTATIC_M.invokeMethod(mv, className);
      Method.POSTMATCHUPDATE_M.invokeMethod(mv, className);
      mv.visitInsn(Opcodes.IRETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();
    }

    cw.visitEnd();
    return cw;
  }
}
